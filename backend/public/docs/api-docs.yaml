openapi: 3.0.0
info:
  title: API invits.co
  version: 1.0.0
  description: Merupakan API pembuatan undangan digital
paths:
  /api/login:
    post:
      tags:
        - Authentication
      summary: Login User
      description: Login user dengan email dan password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Login successful.
        '401':
          description: Login gagal
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Login failed.
                  errors:
                    type: object
                    example:
                      login: Invalid email and password combination.
  /api/register:
    post:
      tags:
        - Authentication
      summary: Registrasi User
      description: Registrasi user baru dengan data yang diperlukan.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                mobile:
                  type: string
                  example: '1234567890'
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
                c_password:
                  type: string
                  format: password
                  example: password123
      responses:
        '201':
          description: Registrasi berhasil
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Registration successful.
        '422':
          description: Validasi gagal
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: The given data was invalid.
                  errors:
                    $ref: '#/components/schemas/ValidationErrors'
        '500':
          description: Error server
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Internal server error.
                  errors:
                    type: object
                    example: {}
  /api/logout:
    post:
      tags:
        - Authentication
      summary: Logout User
      description: Logout pengguna saat ini.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout berhasil
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logout successful.
  /api/packages:
    get:
      tags:
        - Package
      summary: Get all packages
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                packages:
                  - id: 1
                    name: Package 1
                    price: 100.00
                  - id: 2
                    name: Package 2
                    price: 200.00
    post:
      tags:
        - Package
      summary: Create a new package
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: Package 3
              price: 150.00
              description: A new package
              features: Feature 1, Feature 2
      responses:
        '201':
          description: Package created successfully
          content:
            application/json:
              example:
                package:
                  id: 3
                  name: Package 3
                  price: 150.00

  /api/packages/{id}:
    get:
      tags:
        - Package
      summary: Get a package by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                package:
                  id: 1
                  name: Package 1
                  price: 100.00
        '404':
          description: Package not found
    put:
      tags:
        - Package
      summary: Update a package by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: Updated Package 1
              price: 120.00
              description: Updated package
              features: Updated feature 1, Updated feature 2
      responses:
        '200':
          description: Package updated successfully
        '404':
          description: Package not found
    delete:
      tags:
        - Package
      summary: Delete a package by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Package deleted successfully
        '404':
          description: Package not found

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: John Doe
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        username:
          type: string
          nullable: true
          example: johndoe123
        email:
          type: string
          format: email
          example: john@example.com
        mobile:
          type: string
          nullable: true
          example: +1234567890
        gender:
          type: string
          nullable: true
          example: Male
        date_of_birth:
          type: string
          format: date
          nullable: true
          example: 1990-01-01
        email_verified_at:
          type: string
          format: date-time
          nullable: true
          example: 2023-10-04T12:00:00Z
        password:
          type: string
          nullable: true
          example: secret_password
        avatar:
          type: string
          nullable: true
          example: img/default-avatar.jpg
        status:
          type: integer
          example: 1
        role:
          type: string
          enum:
            - user
            - admin
          example: user
    Package:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        description:
          type: string
        features:
          type: string
    ValidationErrors:
      type: object
      example: {}
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
